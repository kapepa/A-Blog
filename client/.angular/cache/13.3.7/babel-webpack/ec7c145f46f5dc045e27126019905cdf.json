{"ast":null,"code":"import { catchError, Subject, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./http.service\";\nimport * as i2 from \"ngx-cookie-service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpService, cookieService) {\n      this.httpService = httpService;\n      this.cookieService = cookieService;\n      this.isLogin = false;\n      this.name = 'token';\n      this.error = new Subject();\n      this.token = new Subject();\n      this.token.subscribe(bol => this.isLogin = bol);\n    }\n\n    handleError(error) {\n      const {\n        statusCode,\n        message\n      } = error.error;\n\n      switch (statusCode) {\n        case 401:\n          this.error.next(message);\n          break;\n\n        case 500:\n          this.error.next(message);\n          break;\n      }\n\n      return throwError(() => new Error('Something bad happened; please try again later.'));\n    }\n\n    setAuthorizationToken(token) {\n      this.token.next(true);\n      this.cookieService.set(this.name, token);\n    }\n\n    getAuthorizationToken() {\n      return this.cookieService.get(this.name);\n    }\n\n    login(data) {\n      return this.httpService.login(data).pipe().pipe( // tap(console.log),\n      catchError(this.handleError.bind(this)));\n    }\n\n    logout() {\n      this.token.next(false);\n      this.cookieService.delete(this.name);\n    }\n\n    getUser() {\n      return this.httpService.getUser();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.CookieService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}